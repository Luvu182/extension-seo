'use strict';

// Overview tab module for SEO AI Assistant
(function() {
  // Import dependencies
  const utils = window.seoAIAssistant.utils;
  const styles = window.seoAIAssistant.styles;
  const dataService = window.seoAIAssistant.dataService;

  // Main render function
  function render(pageData) {
    const data = pageData || {};
    console.log("Overview tab received data:", data);
    const container = utils.createElement('div', styles.spaceY3);
    
    // Website Information
    renderWebsiteInformation(container, data);
    
    // SEO Score
    renderSeoScore(container, data);
    
    // Core Web Vitals
    renderCoreWebVitals(container, data);
    
    // Issues Summary
    renderIssuesSummary(container, data);
    
    // Content Overview
    renderContentOverview(container, data);
    
    return container;
  }
  
  // Render Website Information
  function renderWebsiteInformation(container, data) {
    const infoSection = utils.createElement('div', styles.cardSection);
    const infoTitle = utils.createElement('div', styles.cardTitle, 'Website Information');
    infoSection.appendChild(infoTitle);
    
    // Health check status
    const healthChecksContainer = utils.createElement('div', {
      display: 'flex',
      flexWrap: 'wrap',
      gap: '8px',
      marginBottom: '16px'
    });
    
    // Log data for debugging
    console.log("Rendering Website Information with data:", data);
    
    // HTTP Status - Sử dụng dữ liệu thực tế từ page data
    const httpStatus = data.statusCode || 200;
    const httpStatusItem = createHealthCheckItem(
      'HTTP Status',
      httpStatus.toString(),
      httpStatus === 200 ? 'good' : httpStatus < 400 ? 'warning' : 'bad'
    );
    healthChecksContainer.appendChild(httpStatusItem);
    
    // Robots Status - Kiểm tra robots meta và robots.txt
    // Kiểm tra cả noindex trong meta robots và X-Robots-Tag HTTP header
    const robotsMeta = document.querySelector('meta[name="robots"]');
    const robotsContent = robotsMeta ? robotsMeta.getAttribute('content').toLowerCase() : '';
    
    const isNoindex = data.robots && data.robots.isNoindex;
    const isNofollow = data.robots && data.robots.isNofollow;
    
    // Lấy thông tin robots từ data thực tế
    const robotsAllowed = data.robots && data.robots.allowed !== undefined ? data.robots.allowed : true;
    const robotsIndexable = isNoindex === true ? false : 
                         (data.robots && data.robots.directives && data.robots.directives.includes('index')) || 
                         (!robotsContent.includes('noindex'));
    const robotsFollowable = isNofollow === true ? false : 
                          (data.robots && data.robots.directives && data.robots.directives.includes('follow')) || 
                          (!robotsContent.includes('nofollow'));
    
    console.log("Robots info:", {robotsAllowed, robotsIndexable, robotsFollowable, robotsContent});
    
    const robotsItem = createHealthCheckItem(
      'Indexable',
      robotsIndexable ? 'Yes' : 'No',
      robotsIndexable ? 'good' : 'bad'
    );
    healthChecksContainer.appendChild(robotsItem);
    
    const followItem = createHealthCheckItem(
      'Followable',
      robotsFollowable ? 'Yes' : 'No',
      robotsFollowable ? 'good' : 'bad'
    );
    healthChecksContainer.appendChild(followItem);
    
    // Canonical Status - Sử dụng dữ liệu thực tế
    let canonicalValid = false;
    let canonicalUrl = '';
    
    if (data.canonical) {
      if (typeof data.canonical === 'string') {
        // Nếu canonical là string
        canonicalUrl = data.canonical;
        canonicalValid = !!canonicalUrl;
      } else if (data.canonical.url) {
        // Nếu canonical là object có url
        canonicalUrl = data.canonical.url;
        canonicalValid = data.canonical.valid !== undefined ? data.canonical.valid : !!canonicalUrl;
      }
    }
    
    const canonicalItem = createHealthCheckItem(
      'Canonical',
      canonicalValid ? 'Valid' : 'Missing/Invalid',
      canonicalValid ? 'good' : 'warning'
    );
    healthChecksContainer.appendChild(canonicalItem);
    
    // Mobile Friendly - Hiện tại không có cách chính xác để kiểm tra từ client,
    // nhưng có thể kiểm tra viewport meta tag và media queries responsive
    const viewportMeta = document.querySelector('meta[name="viewport"]');
    const hasMobileViewport = viewportMeta && viewportMeta.getAttribute('content').includes('width=device-width');
    const isMobileFriendly = hasMobileViewport || true; // Giả định là mobile friendly nếu không thể xác định chính xác
    
    const mobileFriendlyItem = createHealthCheckItem(
      'Mobile Friendly',
      isMobileFriendly ? 'Yes' : 'No',
      isMobileFriendly ? 'good' : 'warning'
    );
    healthChecksContainer.appendChild(mobileFriendlyItem);
    
    // Secure (HTTPS) - Kiểm tra URL thực tế
    const pageUrl = data.url || window.location.href;
    const isSecure = pageUrl.startsWith('https://');
    
    const secureItem = createHealthCheckItem(
      'Secure',
      isSecure ? 'Yes' : 'No',
      isSecure ? 'good' : 'bad'
    );
    healthChecksContainer.appendChild(secureItem);
    
    infoSection.appendChild(healthChecksContainer);
    
    // Page details - Sử dụng lightBackground để tạo nền sáng
    const detailsContainer = utils.createElement('div', styles.lightBackground);
    
    // Language
    const langRow = utils.createElement('div', {
      display: 'flex',
      marginBottom: '8px'
    });
    
    const langLabel = utils.createElement('div', {
      fontWeight: '600',
      fontSize: '0.85rem',
      width: '100px',
      color: '#64748b'
    }, 'Language:');
    
    // Lấy language từ html tag hoặc meta tag
    const htmlLang = document.documentElement.lang;
    const metaLang = document.querySelector('meta[http-equiv="Content-Language"]');
    const pageLang = htmlLang || (metaLang ? metaLang.getAttribute('content') : null) || 'Not specified';
    
    const langValue = utils.createElement('div', {
      fontSize: '0.85rem',
      flex: '1',
      wordBreak: 'break-all',
      color: '#1e293b' // Màu text tối trên nền sáng
    }, pageLang);
    
    langRow.appendChild(langLabel);
    langRow.appendChild(langValue);
    
    // Canonical URL
    const canonicalRow = utils.createElement('div', {
      display: 'flex',
      marginBottom: '8px'
    });
    
    const canonicalLabel = utils.createElement('div', {
      fontWeight: '600',
      fontSize: '0.85rem',
      width: '100px',
      color: '#64748b'
    }, 'Canonical:');
    
    // Xác định canonical URL từ dữ liệu
    let canonicalUrlText = 'Not specified';
    if (data.canonical) {
      if (typeof data.canonical === 'string' && data.canonical) {
        canonicalUrlText = data.canonical;
      } else if (data.canonical.url) {
        canonicalUrlText = data.canonical.url;
      }
    }
    
    const canonicalValue = utils.createElement('div', {
      fontSize: '0.85rem',
      flex: '1',
      wordBreak: 'break-all',
      color: '#1e293b' // Màu text tối trên nền sáng
    }, canonicalUrlText);
    
    canonicalRow.appendChild(canonicalLabel);
    canonicalRow.appendChild(canonicalValue);
    
    // Robots - Hiển thị giá trị thực tế của robots tag
    const robotsRow = utils.createElement('div', {
      display: 'flex',
      marginBottom: '8px'
    });
    
    const robotsLabel = utils.createElement('div', {
      fontWeight: '600',
      fontSize: '0.85rem',
      width: '100px',
      color: '#64748b'
    }, 'Robots:');
    
    // Lấy giá trị của robots từ data
    let robotsContentValue = 'Not specified';
    if (data.robots && data.robots.content) {
      robotsContentValue = data.robots.content;
    }
    
    const robotsValue = utils.createElement('div', {
      fontSize: '0.85rem',
      flex: '1',
      wordBreak: 'break-all',
      color: '#1e293b' // Màu text tối trên nền sáng
    }, robotsContentValue);
    
    robotsRow.appendChild(robotsLabel);
    robotsRow.appendChild(robotsValue);
    
    // AMP - Kiểm tra xem trang có liên kết AMP không
    const ampRow = utils.createElement('div', {
      display: 'flex'
    });
    
    const ampLabel = utils.createElement('div', {
      fontWeight: '600',
      fontSize: '0.85rem',
      width: '100px',
      color: '#64748b'
    }, 'AMP:');
    
    // Kiểm tra xem trang có liên kết đến phiên bản AMP không
    const ampLink = document.querySelector('link[rel="amphtml"]');
    const ampUrl = ampLink ? ampLink.getAttribute('href') : null;
    
    const ampValue = utils.createElement('div', {
      fontSize: '0.85rem',
      flex: '1',
      wordBreak: 'break-all',
      color: '#1e293b' // Màu text tối trên nền sáng
    }, ampUrl || 'Not available');
    
    ampRow.appendChild(ampLabel);
    ampRow.appendChild(ampValue);
    
    detailsContainer.appendChild(langRow);
    detailsContainer.appendChild(canonicalRow);
    detailsContainer.appendChild(robotsRow);
    detailsContainer.appendChild(ampRow);
    
    infoSection.appendChild(detailsContainer);
    container.appendChild(infoSection);

    // Tạo "Tab con" Response Details
    const responseSection = utils.createElement('div', styles.cardSection);
    const responseTitle = utils.createElement('div', styles.cardTitle, 'Response Details');
    responseSection.appendChild(responseTitle);
    
    const responseContainer = utils.createElement('div', styles.lightBackground);
    
    // HTTP Status Code + Description
    const statusRow = utils.createElement('div', {
      display: 'flex',
      marginBottom: '8px'
    });
    
    const statusLabel = utils.createElement('div', {
      fontWeight: '600',
      fontSize: '0.85rem',
      width: '100px',
      color: '#64748b'
    }, 'Status:');
    
    // Xác định mô tả HTTP status code
    const statusCode = data.statusCode || 200;
    let statusDesc = '';
    
    // Phân loại status code
    if (statusCode >= 200 && statusCode < 300) {
      statusDesc = 'Success';
    } else if (statusCode >= 300 && statusCode < 400) {
      statusDesc = 'Redirect';
    } else if (statusCode >= 400 && statusCode < 500) {
      statusDesc = 'Client Error';
    } else if (statusCode >= 500) {
      statusDesc = 'Server Error';
    }
    
    const statusValue = utils.createElement('div', {
      fontSize: '0.85rem',
      flex: '1',
      color: '#1e293b'
    }, `${statusCode} (${statusDesc})`);
    
    statusRow.appendChild(statusLabel);
    statusRow.appendChild(statusValue);
    
    // Redirect section heading - Luôn hiển thị phần này
    const redirectSectionRow = utils.createElement('div', {
      display: 'flex',
      marginBottom: '8px'
    });
    
    const redirectSectionLabel = utils.createElement('div', {
      fontWeight: '600',
      fontSize: '0.85rem',
      width: '100px',
      color: '#64748b'
    }, 'Redirect To:');
    
    // Xử lý thông tin redirect từ data
    let redirectInfo = 'None';
    
    // Kiểm tra có redirect từ status code hoặc thông tin redirect trong data
    if (statusCode >= 300 && statusCode < 400 || (data.redirect && (data.redirect.fromUrl || data.redirect.url || data.redirect.count > 0))) {
      // Ưu tiên hiển thị URL đích của redirect
      if (data.redirect && data.redirect.url) {
        redirectInfo = data.redirect.url;
      } else if (statusCode === 301) {
        redirectInfo = 'Permanent redirect (301)';
      } else if (statusCode === 302) {
        redirectInfo = 'Temporary redirect (302)';
      } else if (statusCode === 303) {
        redirectInfo = 'See Other (303)';
      } else if (statusCode === 307) {
        redirectInfo = 'Temporary redirect (307)';
      } else if (statusCode === 308) {
        redirectInfo = 'Permanent redirect (308)';
      } else if (data.redirect && data.redirect.count > 0) {
        redirectInfo = `Redirected ${data.redirect.count} time(s)`;
      }
    }
    
    const redirectSectionValue = utils.createElement('div', {
      fontSize: '0.85rem',
      flex: '1',
      wordBreak: 'break-all',
      color: '#1e293b'
    }, redirectInfo);
    
    redirectSectionRow.appendChild(redirectSectionLabel);
    redirectSectionRow.appendChild(redirectSectionValue);
    
    // Tạo "Redirect From" để hiển thị URL nguồn của redirect (luôn hiển thị nếu có redirect)
    const redirectFromRow = utils.createElement('div', {
      display: 'flex',
      marginBottom: '8px'
    });
    
    const redirectFromLabel = utils.createElement('div', {
      fontWeight: '600',
      fontSize: '0.85rem',
      width: '100px',
      color: '#64748b'
    }, 'Redirect From:');
    
    // Lấy URL nguồn từ data.redirect.fromUrl nếu có, nếu không thì hiển thị "Unknown source"
    const sourceUrl = (data.redirect && data.redirect.fromUrl) ? data.redirect.fromUrl : 
                      ((statusCode >= 300 && statusCode < 400) ? 'Unknown source' : 'N/A');
    
    const redirectFromValue = utils.createElement('div', {
      fontSize: '0.85rem',
      flex: '1',
      wordBreak: 'break-all',
      color: '#1e293b'
    }, sourceUrl);
    
    redirectFromRow.appendChild(redirectFromLabel);
    redirectFromRow.appendChild(redirectFromValue);
    
    // Tạo row hiển thị URL ban đầu mà người dùng yêu cầu
    let originalUrlRow = null;
    if (data.redirect && data.redirect.originalRequestedUrl) {
      originalUrlRow = utils.createElement('div', {
        display: 'flex',
        marginBottom: '8px'
      });
      
      const originalUrlLabel = utils.createElement('div', {
        fontWeight: '600',
        fontSize: '0.85rem',
        width: '100px',
        color: '#64748b'
      }, 'Requested URL:');
      
      const originalUrlValue = utils.createElement('div', {
        fontSize: '0.85rem',
        flex: '1',
        wordBreak: 'break-all',
        color: '#1e293b'
      }, data.redirect.originalRequestedUrl);
      
      originalUrlRow.appendChild(originalUrlLabel);
      originalUrlRow.appendChild(originalUrlValue);
    }
    
    // Thêm phần "Redirects for requested URL" chỉ khi có redirect (status 3xx)
    let redirectChainRow = null;
    if (statusCode >= 300 && statusCode < 400) {
      redirectChainRow = utils.createElement('div', {
        display: 'flex',
        marginBottom: '8px'
      });
      
      const redirectChainLabel = utils.createElement('div', {
        fontWeight: '600',
        fontSize: '0.85rem',
        width: '100px',
        color: '#64748b'
      }, 'Redirect Chain:');
      
      // Tạo container cho chuỗi redirect
      const redirectChainContainer = utils.createElement('div', {
        fontSize: '0.85rem',
        flex: '1',
        wordBreak: 'break-all',
        color: '#1e293b'
      });
      
      if (data.redirect && data.redirect.fromUrl) {
          const titleElement = utils.createElement('div', {
            fontWeight: '500',
            marginBottom: '8px',
            color: '#475569'
          });
          
          const titleText = utils.createElement('span', {
            color: '#475569',
            fontWeight: 'bold'
          }, 'Redirect Path:');
          
          titleElement.appendChild(titleText);
          redirectChainContainer.appendChild(titleElement);
          
          // Xác định URL nguồn và đích
          // Ưu tiên lấy từ fromUrl/url trong redirect data
          const sourceUrl = data.redirect.fromUrl || 
                            (data.redirect.originalRequestedUrl || 'Unknown source');
          
          const targetUrl = window.location.href;
          
          // Hiển thị URL nguồn và đích
          const fromElement = utils.createElement('div', {
            marginBottom: '4px',
            display: 'flex',
            alignItems: 'center',
            fontWeight: 'bold'
          });
          
          const fromText = utils.createElement('span', {}, 'FROM: ' + sourceUrl);
          fromElement.appendChild(fromText);
          
          // Hiển thị mũi tên
          const arrowElement = utils.createElement('div', {
            marginBottom: '4px',
            marginLeft: '16px',
            display: 'flex',
            alignItems: 'center',
            color: '#64748b'
          });
          
          const redirectStatus = data.redirect.statusCode || statusCode;
          const arrowText = utils.createElement('span', {}, `↓ HTTP ${redirectStatus}`);
          arrowElement.appendChild(arrowText);
          
          // URL hiện tại
          const currentElement = utils.createElement('div', {
            marginBottom: '8px',
            marginLeft: '16px',
            display: 'flex',
            alignItems: 'center',
            fontWeight: 'bold'
          });
          
          const currentText = utils.createElement('span', {}, 'TO: ' + targetUrl);
          currentElement.appendChild(currentText);
          
          redirectChainContainer.appendChild(fromElement);
          redirectChainContainer.appendChild(arrowElement);
          redirectChainContainer.appendChild(currentElement);
          
          // Thêm đường phân cách nếu còn hiển thị thông tin redirect chain
          if (data.redirect.chain && data.redirect.chain.length > 0) {
            const separator = utils.createElement('div', {
              marginBottom: '12px',
              borderBottom: '1px dashed #e2e8f0',
              width: '100%'
            });
            redirectChainContainer.appendChild(separator);
          }
      }
    }
    // Nếu có URL ban đầu mà người dùng yêu cầu và không trùng với URL hiện tại hoặc URL đầu tiên trong chuỗi
    else if (data.redirect && data.redirect.originalRequestedUrl && window.location.href !== data.redirect.originalRequestedUrl) {
      const titleElement = utils.createElement('div', {
        fontWeight: '500',
        marginBottom: '8px',
        color: '#475569'
      });
      
      const titleText = utils.createElement('span', {
        color: '#475569',
        fontWeight: 'bold'
      }, 'Requested URL was redirected:');
      
      titleElement.appendChild(titleText);
      redirectChainContainer.appendChild(titleElement);
      
      // Hiển thị URL ban đầu và chuyển hướng đầu tiên
      const originalElement = utils.createElement('div', {
        marginBottom: '4px',
        display: 'flex',
        alignItems: 'center'
      });
      
      const originalText = utils.createElement('span', {}, data.redirect.originalRequestedUrl);
      originalElement.appendChild(originalText);
      
      // Hiển thị mũi tên
      const arrowElement = utils.createElement('div', {
        marginBottom: '4px',
        marginLeft: '16px',
        display: 'flex',
        alignItems: 'center',
        color: '#64748b'
      });
      
      const arrowText = utils.createElement('span', {}, `↓ (${statusCode})`);
      arrowElement.appendChild(arrowText);
      
      // URL hiện tại
      const currentElement = utils.createElement('div', {
        marginBottom: '8px',
        marginLeft: '16px',
        display: 'flex',
        alignItems: 'center',
        fontWeight: 'bold'
      });
      
      const currentText = utils.createElement('span', {}, window.location.href);
      currentElement.appendChild(currentText);
      
      redirectChainContainer.appendChild(originalElement);
      redirectChainContainer.appendChild(arrowElement);
      redirectChainContainer.appendChild(currentElement);
    }
    
    redirectChainRow.appendChild(redirectChainLabel);
    redirectChainRow.appendChild(redirectChainContainer);
  }
  
  responseContainer.appendChild(statusRow);
  
  // Chỉ hiển thị thông tin redirect nếu trang thực sự có chuyển hướng (chỉ status 3xx)
  if (statusCode >= 300 && statusCode < 400) {
    responseContainer.appendChild(redirectFromRow);
    responseContainer.appendChild(redirectSectionRow);
    
    // Append original URL row nếu có và trang có redirect
    if (originalUrlRow) {
      responseContainer.appendChild(originalUrlRow);
    }
    
    // Append redirect chain row nếu có
    if (redirectChainRow) {
      responseContainer.appendChild(redirectChainRow);
    }
  }
  
  responseSection.appendChild(responseContainer);
  container.appendChild(responseSection);
}
// Helper function to create a health check item
function createHealthCheckItem(label, value, status) {
  // Define colors for different statuses
  const statusColors = {
    good: { bg: '#d1fae5', text: '#065f46', icon: '✓' }, // Màu text đậm hơn trên nền sáng
    warning: { bg: '#fff7ed', text: '#9a3412', icon: '⚠️' }, // Màu text đậm hơn trên nền sáng
    bad: { bg: '#fee2e2', text: '#991b1b', icon: '✕' } // Màu text đậm hơn trên nền sáng
  };
  
  const color = statusColors[status] || statusColors.warning;
  
  const itemContainer = utils.createElement('div', {
    backgroundColor: color.bg,
    borderRadius: '4px',
    padding: '8px 12px',
    display: 'flex',
    flexDirection: 'column',
    minWidth: '100px'
  });
  
  const itemLabel = utils.createElement('div', {
    fontSize: '0.75rem',
    color: '#4b5563', // Màu text tối trên tất cả nền
    marginBottom: '4px'
  }, label);
  
  const valueRow = utils.createElement('div', {
    display: 'flex',
    alignItems: 'center',
    gap: '4px'
  });
  
  const statusIcon = utils.createElement('span', {
    color: color.text,
    fontSize: '0.75rem'
  }, color.icon);
  
  const itemValue = utils.createElement('div', {
    fontSize: '0.9rem',
    fontWeight: '600',
    color: color.text
  }, value);
  
  valueRow.appendChild(statusIcon);
  valueRow.appendChild(itemValue);
  
  itemContainer.appendChild(itemLabel);
  itemContainer.appendChild(valueRow);
  
  return itemContainer;
}

// Render SEO Score section
function renderSeoScore(container, data) {
  const scoreContainer = utils.createElement('div', styles.scoreContainer);
  const scoreCircle = utils.createElement('div', styles.scoreCircle);
  const scoreText = utils.createElement('div', styles.scoreText);
  const scoreValue = utils.createElement('span', styles.scoreValue, data.seoScore ? data.seoScore.toString() : '0');
  const scoreLabel = utils.createElement('span', styles.scoreLabel, 'SEO SCORE');
  
  scoreText.appendChild(scoreValue);
  scoreText.appendChild(scoreLabel);
  scoreCircle.appendChild(scoreText);
  scoreContainer.appendChild(scoreCircle);
  container.appendChild(scoreContainer);
}

// Render Core Web Vitals section
function renderCoreWebVitals(container, data) {
  const vitalsSection = utils.createElement('div', styles.cardSection);
  const vitalsTitle = utils.createElement('div', styles.cardTitle, 'Core Web Vitals');
  vitalsSection.appendChild(vitalsTitle);
  
  // Thu thập metrics từ Performance API nếu có
  let metrics = { lcp: 2.5, fid: 100, cls: 0.1, ttfb: 0.8 };
  
  // Sử dụng dữ liệu thực tế nếu có
  if (data.metrics) {
    metrics = data.metrics;
  } else {
    // Cố gắng thu thập từ Performance API
    if (window.performance && window.performance.timing) {
      const timing = window.performance.timing;
      // TTFB (Time to First Byte)
      const ttfb = (timing.responseStart - timing.navigationStart) / 1000;
      if (ttfb > 0) metrics.ttfb = ttfb.toFixed(2);
    }
  }
  
  const metricsContainer = utils.createElement('div', {display: 'flex', flexDirection: 'column', gap: '12px'});
  
  // LCP metric
  renderMetric(
    metricsContainer, 
    'LCP (Largest Contentful Paint)', 
    `${metrics.lcp}s`,
    metrics.lcp < 2.5 ? '#10b981' : metrics.lcp < 4 ? '#f59e0b' : '#ef4444',
    Math.min(100, (metrics.lcp / 4) * 100)
  );
  
  // FID metric
  renderMetric(
    metricsContainer, 
    'FID (First Input Delay)', 
    `${metrics.fid}ms`,
    metrics.fid < 100 ? '#10b981' : metrics.fid < 300 ? '#f59e0b' : '#ef4444',
    Math.min(100, (metrics.fid / 300) * 100)
  );
  
  // CLS metric
  renderMetric(
    metricsContainer, 
    'CLS (Cumulative Layout Shift)', 
    metrics.cls.toString(),
    metrics.cls < 0.1 ? '#10b981' : metrics.cls < 0.25 ? '#f59e0b' : '#ef4444',
    Math.min(100, (metrics.cls / 0.25) * 100)
  );
  
  vitalsSection.appendChild(metricsContainer);
  container.appendChild(vitalsSection);
}

// Helper to render a metric with progress bar
function renderMetric(container, label, value, color, percentage) {
  const metricContainer = utils.createElement('div');
  
  const headerRow = utils.createElement('div', {
    display: 'flex', 
    justifyContent: 'space-between', 
    fontSize: '0.75rem', 
    marginBottom: '4px'
  });
  
  const metricLabel = utils.createElement('span', {color: '#64748b'}, label);
  const metricValue = utils.createElement('span', {color}, value);
  
  headerRow.appendChild(metricLabel);
  headerRow.appendChild(metricValue);
  metricContainer.appendChild(headerRow);
  
  const progressBar = utils.createElement('div', styles.progressBar);
  const progressFill = utils.createElement('div', {
    ...styles.progressFill,
    backgroundColor: color,
    width: `${percentage}%`
  });
  
  progressBar.appendChild(progressFill);
  metricContainer.appendChild(progressBar);
  
  container.appendChild(metricContainer);
}

// Hàm tạo issues dựa trên dữ liệu thực tế
function generateIssues(data) {
  const critical = [];
  const warnings = [];
  const suggestions = [];
  
  // Kiểm tra title
  if (!data.title) {
    critical.push({ type: 'error', message: 'Missing page title' });
  } else if (data.title.length < 30) {
    warnings.push({ type: 'warning', message: 'Page title is too short' });
  } else if (data.title.length > 60) {
    warnings.push({ type: 'warning', message: 'Page title is too long' });
  }
  
  // Kiểm tra meta description
  if (!data.description) {
    warnings.push({ type: 'warning', message: 'Missing meta description' });
  } else if (data.description.length < 120) {
    suggestions.push({ type: 'info', message: 'Meta description is too short' });
  } else if (data.description.length > 160) {
    suggestions.push({ type: 'info', message: 'Meta description is too long' });
  }
  
  // Kiểm tra headings
  if (data.headings) {
    // Kiểm tra H1
    if (!data.headings.h1 || data.headings.h1.length === 0) {
      critical.push({ type: 'error', message: 'Missing H1 heading' });
    } else if (data.headings.h1.length > 1) {
      warnings.push({ type: 'warning', message: 'Multiple H1 headings detected' });
    }
  }
  
  // Kiểm tra robots
  if (data.robots && data.robots.isNoindex) {
    critical.push({ type: 'error', message: 'Page is set to noindex' });
  }
  
  return { critical, warnings, suggestions };
}

// Render Issues Summary section
function renderIssuesSummary(container, data) {
  const issuesSection = utils.createElement('div', styles.cardSection);
  const issuesTitle = utils.createElement('div', styles.cardTitle, 'Issues Summary');
  issuesSection.appendChild(issuesTitle);
  
  const issuesContainer = utils.createElement('div', {marginBottom: '8px'});
  
  // Nếu không có dữ liệu issues, tạo một bộ dữ liệu dựa trên trang web hiện tại
  const issues = data.issues || generateIssues(data);
  
  // Count all issues
  const criticalCount = issues.critical ? issues.critical.length : 0;
  const warningsCount = issues.warnings ? issues.warnings.length : 0;
  const suggestionsCount = issues.suggestions ? issues.suggestions.length : 0;
  
  // Critical issues
  const criticalItem = utils.createElement('div', {
    display: 'flex',
    justifyContent: 'space-between',
    marginBottom: '8px'
  });
  
  const criticalLabel = utils.createElement('div', {
    display: 'flex',
    alignItems: 'center',
    fontSize: '0.875rem',
    color: criticalCount > 0 ? '#ef4444' : '#94a3af'
  });
  
  const criticalIcon = utils.createElement('span', {marginRight: '8px'}, '❌');
  const criticalText = utils.createElement('span', {}, 'Critical Issues');
  
  criticalLabel.appendChild(criticalIcon);
  criticalLabel.appendChild(criticalText);
  
  const criticalValue = utils.createElement('div', {
    fontSize: '0.875rem',
    fontWeight: '500',
    color: criticalCount > 0 ? '#ef4444' : '#94a3af'
  }, criticalCount.toString());
  
  criticalItem.appendChild(criticalLabel);
  criticalItem.appendChild(criticalValue);
  issuesContainer.appendChild(criticalItem);
  
  // Warnings
  const warningsItem = utils.createElement('div', {
    display: 'flex',
    justifyContent: 'space-between',
    marginBottom: '8px'
  });
  
  const warningsLabel = utils.createElement('div', {
    display: 'flex',
    alignItems: 'center',
    fontSize: '0.875rem',
    color: warningsCount > 0 ? '#f59e0b' : '#94a3af'
  });
  
  const warningsIcon = utils.createElement('span', {marginRight: '8px'}, '⚠️');
  const warningsText = utils.createElement('span', {}, 'Warnings');
  
  warningsLabel.appendChild(warningsIcon);
  warningsLabel.appendChild(warningsText);
  
  const warningsValue = utils.createElement('div', {
    fontSize: '0.875rem',
    fontWeight: '500',
    color: warningsCount > 0 ? '#f59e0b' : '#94a3af'
  }, warningsCount.toString());
  
  warningsItem.appendChild(warningsLabel);
  warningsItem.appendChild(warningsValue);
  issuesContainer.appendChild(warningsItem);
  
  // Suggestions
  const suggestionsItem = utils.createElement('div', {
    display: 'flex',
    justifyContent: 'space-between'
  });
  
  const suggestionsLabel = utils.createElement('div', {
    display: 'flex',
    alignItems: 'center',
    fontSize: '0.875rem',
    color: suggestionsCount > 0 ? '#3b82f6' : '#94a3af'
  });
  
  const suggestionsIcon = utils.createElement('span', {marginRight: '8px'}, 'ℹ️');
  const suggestionsText = utils.createElement('span', {}, 'Suggestions');
  
  suggestionsLabel.appendChild(suggestionsIcon);
  suggestionsLabel.appendChild(suggestionsText);
  
  const suggestionsValue = utils.createElement('div', {
    fontSize: '0.875rem',
    fontWeight: '500',
    color: suggestionsCount > 0 ? '#3b82f6' : '#94a3af'
  }, suggestionsCount.toString());
  
  suggestionsItem.appendChild(suggestionsLabel);
  suggestionsItem.appendChild(suggestionsValue);
  issuesContainer.appendChild(suggestionsItem);
  
  issuesSection.appendChild(issuesContainer);
  
  // View Issues button
  const viewIssuesButton = utils.createElement('button', styles.buttonPrimary, 'View All Issues', {
    onClick: () => {
      if (window.seoAIAssistant.app && window.seoAIAssistant.app.switchTab) {
        window.seoAIAssistant.app.switchTab('issues');
      }
    }
  });
  
  issuesSection.appendChild(viewIssuesButton);
  container.appendChild(issuesSection);
}

// Render Content Overview section
function renderContentOverview(container, data) {
  const contentSection = utils.createElement('div', styles.cardSection);
  const contentTitle = utils.createElement('div', styles.cardTitle, 'Content Overview');
  contentSection.appendChild(contentTitle);
  
  const statsContainer = utils.createElement('div', styles.gridStats);
  
  // Title Length
  const titleContainer = utils.createElement('div', styles.statItem);
  const titleLabel = utils.createElement('div', styles.statLabel, 'Title Length');
  const titleValue = utils.createElement('div', styles.statValue, data.title ? data.title.length.toString() : '0');
  
  titleContainer.appendChild(titleLabel);
  titleContainer.appendChild(titleValue);
  statsContainer.appendChild(titleContainer);
  
  // Description Length
  const descContainer = utils.createElement('div', styles.statItem);
  const descLabel = utils.createElement('div', styles.statLabel, 'Meta Description');
  const descValue = utils.createElement('div', styles.statValue, data.description ? data.description.length.toString() : '0');
  
  descContainer.appendChild(descLabel);
  descContainer.appendChild(descValue);
  statsContainer.appendChild(descContainer);
  
  // Headings Count
  const headingsContainer = utils.createElement('div', styles.statItem);
  const headingsLabel = utils.createElement('div', styles.statLabel, 'Headings');
  
  // Count total headings
  let headingsCount = 0;
  if (data.content && data.content.headings) {
    headingsCount = data.content.headings.length;
  } else if (data.headings) {
    // Count headings from data source
    let count = 0;
    Object.keys(data.headings).forEach(level => {
      if (Array.isArray(data.headings[level])) {
        count += data.headings[level].length;
      }
    });
    headingsCount = count;
  } else {
    // Nếu không có dữ liệu, có thể đếm trực tiếp từ DOM (chỉ khi render trong content script)
    if (typeof document !== 'undefined') {
      try {
        headingsCount = document.querySelectorAll('h1, h2, h3, h4, h5, h6').length;
      } catch (e) {
        console.error("Error counting headings from DOM:", e);
      }
    }
  }
  
  const headingsValue = utils.createElement('div', styles.statValue, headingsCount.toString());
  
  headingsContainer.appendChild(headingsLabel);
  headingsContainer.appendChild(headingsValue);
  statsContainer.appendChild(headingsContainer);
  
  // Total Links
  const linksContainer = utils.createElement('div', styles.statItem);
  const linksLabel = utils.createElement('div', styles.statLabel, 'Total Links');
  
  let linksCount = 0;
  if (data.links) {
    if (typeof data.links.total !== 'undefined') {
      linksCount = data.links.total;
    } else {
      linksCount = (data.links.internal || 0) + (data.links.external || 0);
    }
  } else {
    // Nếu không có dữ liệu, có thể đếm trực tiếp từ DOM (chỉ khi render trong content script)
    if (typeof document !== 'undefined') {
      try {
        linksCount = document.querySelectorAll('a').length;
      } catch (e) {
        console.error("Error counting links from DOM:", e);
      }
    }
  }
  
  const linksValue = utils.createElement('div', styles.statValue, linksCount.toString());
  
  linksContainer.appendChild(linksLabel);
  linksContainer.appendChild(linksValue);
  statsContainer.appendChild(linksContainer);
  
  contentSection.appendChild(statsContainer);
  container.appendChild(contentSection);
}

// Export public API
window.seoAIAssistant = window.seoAIAssistant || {};
window.seoAIAssistant.tabs = window.seoAIAssistant.tabs || {};

// Đảm bảo render được export với tên đúng
function renderOverviewTab(pageData) {
  return render(pageData);
}

window.seoAIAssistant.tabs.overviewTab = {
  render: renderOverviewTab
};

// Log để debug
console.log("Overview tab module loaded:", window.seoAIAssistant.tabs.overviewTab);
})();